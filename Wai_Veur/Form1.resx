<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>